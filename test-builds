#!/bin/bash
set -e

checksum_find_arg="-a -not -path '*/.git/*' "
git_ls_files_arg="--others "
print_db=0
export MAKEFLAGS=-j8

while getopts ":adopvx" opt; do
    case $opt in
        a)
        checksum_find_arg+="-a -not -name '*.a' "
        ;;
        d)
        checksum_find_arg+="-a -not -name '*.d' "
        ;;
        o)
        checksum_find_arg+="-a -not -name '*.o' "
        ;;
        p)
        print_db=1
        checksum_find_arg+="-a -not -name '*-db.txt' "
        git_ls_files_arg+="--exclude=*-db.txt "
        ;;
        v)
        MAKEFLAGS+=" V=1"
        ;;
        x)
        checksum_find_arg+="-a -not -executable "
        ;;
        ?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
    esac
done

git clean -dxf

nocf=0
trap "if [ -e \"\$checksum_file\" ]; then rm \$checksum_file; fi" EXIT

targets="all asm cpp objdump"
top_testdir=$PWD

function curdir {
    realpath -m --relative-to $top_testdir $PWD
}

function check_arch {
    files=$(find . -not -path './.git/*' -a -not -name test-builds -a \
                 \( -name "*.o" -o -executable -type f \) )
    for f in $files; do
	let nocf=nocf+1
	arch=$($1 -f $f | grep -oP "architecture: \K.*" | cut -f1 -d,)
	if [ "$arch" != "$2" ]; then
	    echo "ERROR: $f \"$arch\" != \"$2\""
	    exit 1
	fi
    done
}

function test_makefiles {
    makefiles=`find -name Makefile`
    for f in $makefiles; do
        pushd . > /dev/null
        cd `dirname $f`
        echo "make clean, PWD=$(curdir $PWD)"
        make clean
        echo "make $targets, PWD=$(curdir $PWD)"
        make $targets
        check_arch $1 $2
        if [ "$print_db" -eq "1" ]; then
            make print-data-base > $top_testdir/$(realpath $PWD --relative-to=$top_testdir | tr '/' '~')-$4-db.txt
        fi
        popd > /dev/null
        sha256sum --check --quiet $3
    done
}

function test_build {
    echo "make $targets O=$1, PWD=$(curdir $PWD)"
    make $targets O=$1
    checksum_file=`mktemp`
    pushd . > /dev/null
    cd $1
    eval find -type f $checksum_find_arg | xargs sha256sum > $checksum_file
    test_makefiles $2 $3 $checksum_file with-O
    echo "make distclean, PWD=$(curdir PWD)"
    make distclean
    popd > /dev/null
    if [ "$1" != "." ]; then rmdir $1; fi
    pushd . > /dev/null
    mkdir -p $1
    cd $1
    echo "make $targets -f `dirs -0`/Makefile, PWD=$(curdir $PWD)"
    make $targets -f `dirs -0`/Makefile
    test_makefiles $2 $3 $checksum_file with-dash-f
    echo "make distclean, PWD=$(curdir $PWD)"
    make distclean
    popd > /dev/null
    if [ "$1" != "." ]; then rmdir $1; fi
    rm $checksum_file
}

test_build . objdump i386:x86-64
test_build build objdump i386:x86-64
build_oe_env=$(eval echo $(make O=build-oe -pq 2> /dev/null | grep -oP 'config-env = \K.*'))
if [ -e $build_oe_env ]; then
    test_build build-oe $(. $build_oe_env && which $OBJDUMP) arm
fi

echo "All $nocf files OK"

cruft=`git ls-files $git_ls_files_arg`
if [ -n "$cruft" ]; then
   echo "Cruft: $cruft"
fi
