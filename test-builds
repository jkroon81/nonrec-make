#!/bin/sh
set -e

checksum_find_arg="-a -not -path '*/.git/*' "

while getopts ":adox" opt; do
    case $opt in
        a)
        checksum_find_arg+="-a -not -name '*.a' "
        ;;
        d)
        checksum_find_arg+="-a -not -name '*.d' "
        ;;
        o)
        checksum_find_arg+="-a -not -name '*.o' "
        ;;
        x)
        checksum_find_arg+="-a -not -executable "
        ;;
        ?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
    esac
done

git clean -dxf

export MAKEFLAGS=-j8

nocf=0
noff=0
trap "if [ -e \"\$checksum_file\" ]; then rm \$checksum_file; fi" EXIT

function check_arch {
    files=$(find . -not -path './.git/*' -a -not -name test-builds -a \
                 \( -name "*.o" -o -executable -type f \) )
    for f in $files; do
	let nocf=nocf+1
	arch=$(file $f | cut -f 2 -d , | tr -d " ")
	if [ "$arch" != "$1" ]; then
	    let noff=noff+1
	    echo "ERROR: $f \"$arch\" != \"$1\""
	fi
    done
}

function test_makefiles {
    makefiles=`find -name Makefile`
    for f in $makefiles; do
        pushd . > /dev/null
        cd `dirname $f`
        echo "make clean, PWD=$PWD"
        make clean
        echo "make, PWD=$PWD"
        make
        check_arch $1
        popd > /dev/null
        sha256sum --check --quiet $2
    done
}

function test_build {
    echo "make O=$1, PWD=$PWD"
    make O=$1
    checksum_file=`mktemp`
    pushd . > /dev/null
    cd $1
    eval find -type f $checksum_find_arg | xargs sha256sum > $checksum_file
    test_makefiles $2 $checksum_file
    echo "make distclean, PWD=$PWD"
    make distclean
    popd > /dev/null
    if [ "$1" != "." ]; then rmdir $1; fi
    pushd . > /dev/null
    mkdir -p $1
    cd $1
    echo "make -f `dirs -0`/Makefile, PWD=$PWD"
    make -f `dirs -0`/Makefile
    test_makefiles $2 $checksum_file
    echo "make distclean, PWD=$PWD"
    make distclean
    popd > /dev/null
    if [ "$1" != "." ]; then rmdir $1; fi
    rm $checksum_file
}

test_build . x86-64
test_build build x86-64
test_build build-oe ARM

if [ $noff -ne 0 ]; then
    echo "$noff/$nocf files with incorrect arch"
else
    echo "All $nocf files OK"
fi

cruft=`git ls-files --others`
if [ -n "$cruft" ]; then
   echo "Cruft: $cruft"
fi
